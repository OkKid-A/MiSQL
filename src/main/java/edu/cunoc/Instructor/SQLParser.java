
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.cunoc.Instructor;

import edu.cunoc.Proyecto.ProyectoLector;
import edu.cunoc.Query.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SQLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SQLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SQLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SQLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\024" +
    "\004\000\002\024\002\000\002\021\004\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\017\007\000\002\031\003\000\002\031\003\000\002" +
    "\016\012\000\002\023\005\000\002\023\003\000\002\032" +
    "\005\000\002\032\002\000\002\015\010\000\002\022\005" +
    "\000\002\022\003\000\002\014\006\000\002\030\004\000" +
    "\002\027\005\000\002\027\002\000\002\012\004\000\002" +
    "\013\003\000\002\013\002\000\002\011\004\000\002\006" +
    "\005\000\002\006\005\000\002\006\002\000\002\007\005" +
    "\000\002\010\005\000\002\005\005\000\002\025\004\000" +
    "\002\026\005\000\002\026\002\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\014\002\ufffe\017\010\020\006\021\005\022" +
    "\004\001\002\000\004\025\121\001\002\000\004\025\115" +
    "\001\002\000\004\025\100\001\002\000\004\013\ufffa\001" +
    "\002\000\006\031\023\035\024\001\002\000\004\013\022" +
    "\001\002\000\004\002\021\001\002\000\014\002\ufffe\017" +
    "\010\020\006\021\005\022\004\001\002\000\004\002\000" +
    "\001\002\000\004\013\ufffc\001\002\000\004\013\ufffb\001" +
    "\002\000\004\013\ufff9\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\001\001\002\000\014\002\ufffd\017\ufffd\020" +
    "\ufffd\021\ufffd\022\ufffd\001\002\000\004\025\ufff6\001\002" +
    "\000\010\014\074\016\uffea\025\uffea\001\002\000\004\025" +
    "\027\001\002\000\004\025\ufff7\001\002\000\004\035\030" +
    "\001\002\000\016\013\uffdd\015\uffdd\023\uffdd\024\uffdd\026" +
    "\uffdd\032\070\001\002\000\004\024\032\001\002\000\004" +
    "\035\034\001\002\000\004\013\ufff8\001\002\000\016\004" +
    "\061\005\055\006\054\007\062\010\060\011\057\001\002" +
    "\000\010\013\uffe3\027\040\030\041\001\002\000\004\013" +
    "\uffe9\001\002\000\004\013\uffe6\001\002\000\004\035\034" +
    "\001\002\000\004\035\034\001\002\000\004\030\043\001" +
    "\002\000\004\035\034\001\002\000\004\013\uffe4\001\002" +
    "\000\004\030\043\001\002\000\004\013\uffe1\001\002\000" +
    "\004\027\051\001\002\000\004\013\uffe5\001\002\000\004" +
    "\035\034\001\002\000\004\027\051\001\002\000\004\013" +
    "\uffe2\001\002\000\024\013\uffda\014\uffda\024\uffda\027\uffda" +
    "\030\uffda\033\uffda\034\uffda\036\uffda\037\uffda\001\002\000" +
    "\024\013\uffdb\014\uffdb\024\uffdb\027\uffdb\030\uffdb\033\uffdb" +
    "\034\uffdb\036\uffdb\037\uffdb\001\002\000\024\013\uffd2\014" +
    "\uffd2\024\uffd2\027\uffd2\030\uffd2\033\063\034\065\036\066" +
    "\037\067\001\002\000\024\013\uffd7\014\uffd7\024\uffd7\027" +
    "\uffd7\030\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\001\002" +
    "\000\024\013\uffd8\014\uffd8\024\uffd8\027\uffd8\030\uffd8\033" +
    "\uffd8\034\uffd8\036\uffd8\037\uffd8\001\002\000\024\013\uffdc" +
    "\014\uffdc\024\uffdc\027\uffdc\030\uffdc\033\uffdc\034\uffdc\036" +
    "\uffdc\037\uffdc\001\002\000\024\013\uffd9\014\uffd9\024\uffd9" +
    "\027\uffd9\030\uffd9\033\uffd9\034\uffd9\036\uffd9\037\uffd9\001" +
    "\002\000\016\013\uffd6\014\uffd6\016\uffd6\024\uffd6\027\uffd6" +
    "\030\uffd6\001\002\000\014\013\uffe0\014\uffe0\024\uffe0\027" +
    "\uffe0\030\uffe0\001\002\000\016\013\uffd5\014\uffd5\016\uffd5" +
    "\024\uffd5\027\uffd5\030\uffd5\001\002\000\016\013\uffd4\014" +
    "\uffd4\016\uffd4\024\uffd4\027\uffd4\030\uffd4\001\002\000\016" +
    "\013\uffd3\014\uffd3\016\uffd3\024\uffd3\027\uffd3\030\uffd3\001" +
    "\002\000\004\035\072\001\002\000\014\013\uffdf\015\uffdf" +
    "\023\uffdf\024\uffdf\026\uffdf\001\002\000\016\013\uffdd\015" +
    "\uffdd\023\uffdd\024\uffdd\026\uffdd\032\070\001\002\000\014" +
    "\013\uffde\015\uffde\023\uffde\024\uffde\026\uffde\001\002\000" +
    "\004\035\076\001\002\000\006\016\uffec\025\uffec\001\002" +
    "\000\010\014\074\016\uffea\025\uffea\001\002\000\006\016" +
    "\uffeb\025\uffeb\001\002\000\004\035\030\001\002\000\006" +
    "\015\102\026\ufff1\001\002\000\004\035\024\001\002\000" +
    "\004\026\104\001\002\000\004\015\105\001\002\000\016" +
    "\014\uffd2\016\uffd2\033\063\034\065\036\066\037\067\001" +
    "\002\000\006\014\111\016\ufff3\001\002\000\004\016\110" +
    "\001\002\000\004\013\ufff5\001\002\000\016\014\uffd2\016" +
    "\uffd2\033\063\034\065\036\066\037\067\001\002\000\004" +
    "\016\ufff4\001\002\000\004\016\114\001\002\000\004\026" +
    "\ufff2\001\002\000\004\035\030\001\002\000\006\013\uffe7" +
    "\024\032\001\002\000\004\013\uffed\001\002\000\004\013" +
    "\uffe8\001\002\000\004\035\030\001\002\000\004\023\123" +
    "\001\002\000\004\035\034\001\002\000\010\013\uffee\014" +
    "\127\024\uffee\001\002\000\006\013\uffe7\024\032\001\002" +
    "\000\004\013\ufff0\001\002\000\004\035\034\001\002\000" +
    "\006\013\uffef\024\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\126\000\022\002\011\014\016\015\006\016\015\017" +
    "\014\020\010\021\012\024\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\025\031\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\014\016\015\006\016\015\017\014\020" +
    "\010\021\012\024\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\030\001\001\000\004\026\070\001\001" +
    "\000\004\012\032\001\001\000\006\005\034\011\035\001" +
    "\001\000\002\001\001\000\004\004\055\001\001\000\004" +
    "\006\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\046\001\001\000\004\005\041\001\001\000\004" +
    "\010\043\001\001\000\004\005\044\001\001\000\002\001" +
    "\001\000\004\010\045\001\001\000\002\001\001\000\004" +
    "\007\047\001\001\000\002\001\001\000\004\005\051\001" +
    "\001\000\004\007\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\076" +
    "\001\001\000\002\001\001\000\004\025\100\001\001\000" +
    "\004\032\102\001\001\000\004\030\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\105\023\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\105\023\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\115\001\001" +
    "\000\006\012\117\013\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\121\001\001\000\002\001\001" +
    "\000\006\005\123\022\124\001\001\000\002\001\001\000" +
    "\006\012\117\013\125\001\001\000\002\001\001\000\006" +
    "\005\123\022\127\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SQLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SQLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SQLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private ProyectoLector proyectoLector;

    public SQLParser(SQLexer lex, ProyectoLector proyectoLector){
                super(lex);
                this.proyectoLector = proyectoLector;
            }

private InstructorSQL instructorSQL = new InstructorSQL(proyectoLector);

public InstructorSQL getInstructorSQL(){
    return instructorSQL;
}

public void syntax_error(Symbol cur_token) {
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
            System.out.println("Linea " + cur_token.left+" Columna " + cur_token.right);
            String posibleLex = "";
            if (cur_token.value != null){
                System.out.println("Lexema: "+cur_token.value);
                posibleLex = "Lexema: "+(String) cur_token.value;
            }
            instructorSQL.addError("Error sintactico al encontrar el simbolo:" + symbl_name_from_id(cur_token.sym)+"\nLinea " +
                    cur_token.left+", Columna \n" + cur_token.right+posibleLex);
            if (expected_token_ids().isEmpty()) {
                System.out.println("ya no se esperaba ningun simbolo");
            } else {
                List<Integer> ids = this.expected_token_ids();
                LinkedList<String> list = new LinkedList();
                Iterator var3 = ids.iterator();

                while(var3.hasNext()) {
                    Integer expected = (Integer)var3.next();
                    list.add(this.symbl_name_from_id(expected));
                }
                              instructorSQL.addError("Se esperaba uno de los tokens:" + list.toString());
                                                            report_expected_token_ids();
                                                        }
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SQLParser$actions {
  private final SQLParser parser;

  /** Constructor */
  CUP$SQLParser$actions(SQLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SQLParser$do_action_part00000000(
    int                        CUP$SQLParser$act_num,
    java_cup.runtime.lr_parser CUP$SQLParser$parser,
    java.util.Stack            CUP$SQLParser$stack,
    int                        CUP$SQLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SQLParser$result;

      /* select the action based on the action number */
      switch (CUP$SQLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= script EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		InstructorSQL start_val = (InstructorSQL)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		RESULT = start_val;
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SQLParser$parser.done_parsing();
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // script ::= operaciones 
            {
              InstructorSQL RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<Instruccion> o = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 instructorSQL.setQueries(o); RESULT = instructorSQL; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("script",0, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // operaciones ::= operacion operaciones 
            {
              ArrayList<Instruccion> RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Instruccion q = (Instruccion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<Instruccion> op = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 op.add(q); RESULT = op; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operaciones ::= 
            {
              ArrayList<Instruccion> RESULT =null;
		 RESULT =  new ArrayList<Instruccion>(); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("operaciones",18, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operacion ::= query PC 
            {
              Instruccion RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Instruccion q = (Instruccion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 if(q.isValid(proyectoLector)){
                                                       RESULT = q;}
                                                       else{parser.report_error("Columna o Archivo no encontrado en linea: "+cur_token.right+" columna: "+cur_token.left,q);
                                                       instructorSQL.addError("No se encontro la columna o archivo mencionado en linea: "+cur_token.right+" columna: "+cur_token.left);} 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("operacion",15, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // query ::= select 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Select s = (Select)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("query",14, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // query ::= insert 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Insert i = (Insert)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("query",14, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // query ::= update 
            {
              Instruccion RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Update u = (Update)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = u; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("query",14, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // query ::= delete 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Delete d = (Delete)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("query",14, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select ::= SELECCIONAR sel_columnas EN path filtrar 
            {
              Select RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		ArrayList<String> s = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico f = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = new Select(p,s,f); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("select",13, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sel_columnas ::= lis_columnas 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("sel_columnas",23, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sel_columnas ::= ASTERISCO 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("sel_columnas",23, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // insert ::= INSERTAR EN path insert_col VALORES PAR_OP lis_valores PAR_CLO 
            {
              Insert RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).right;
		ArrayList<String> s = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ArrayList<Object> v = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT = new Insert(p,s,v); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("insert",12, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-7)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lis_valores ::= valor COMA lis_valores 
            {
              ArrayList<Object> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<Object> lv = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 lv.add(v); RESULT = lv; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("lis_valores",17, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lis_valores ::= valor 
            {
              ArrayList<Object> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 ArrayList<Object> lv = new ArrayList<Object>(); lv.add(v); RESULT = lv; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("lis_valores",17, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // insert_col ::= PAR_OP lis_columnas PAR_CLO 
            {
              ArrayList<String> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ArrayList<String> l = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		 RESULT = l; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("insert_col",24, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // insert_col ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = null; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("insert_col",24, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // update ::= ACTUALIZAR EN path ASIGNAR lis_asign filtrar_pos 
            {
              Update RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ArrayList<Condicion> l = (ArrayList<Condicion>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico f = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = new Update(p,l,f); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("update",11, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-5)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // lis_asign ::= condicion COMA lis_asign 
            {
              ArrayList<Condicion> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int laright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<Condicion> la = (ArrayList<Condicion>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 la.add(c); RESULT = la; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("lis_asign",16, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // lis_asign ::= condicion 
            {
              ArrayList<Condicion> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 ArrayList<Condicion> la = new ArrayList<Condicion>(); la.add(c); RESULT = la; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("lis_asign",16, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // delete ::= ELIMINAR EN path filtrar_pos 
            {
              Delete RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico f = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = new Delete(p,f); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("delete",10, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-3)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lis_columnas ::= ID_ARCHIVO columna 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<String> c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 c.add(i); RESULT = c; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("lis_columnas",22, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // columna ::= COMA ID_ARCHIVO columna 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<String> c = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 c.add(i); RESULT = c; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("columna",21, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // columna ::= 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<String>(); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("columna",21, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // filtrar ::= FILTRAR condiciones 
            {
              Logico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico c = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("filtrar",8, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // filtrar_pos ::= filtrar 
            {
              Logico RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico f = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("filtrar_pos",9, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // filtrar_pos ::= 
            {
              Logico RESULT =null;
		 RESULT = null; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("filtrar_pos",9, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condiciones ::= condicion cond_op_log 
            {
              Logico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int copleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int copright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico cop = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 cop.add(c); RESULT = cop; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("condiciones",7, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cond_op_log ::= AND condicion con_and 
            {
              Logico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico ca = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 ca.add(c); ca.setAnd(true); RESULT = ca; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("cond_op_log",4, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cond_op_log ::= OR condicion con_or 
            {
              Logico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico co = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 co.add(c); co.setAnd(false); RESULT = co; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("cond_op_log",4, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cond_op_log ::= 
            {
              Logico RESULT =null;
		 RESULT = new Logico(); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("cond_op_log",4, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // con_and ::= AND condicion con_and 
            {
              Logico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int caleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico ca = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 ca.add(c); RESULT = ca; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("con_and",5, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // con_or ::= OR condicion con_or 
            {
              Logico RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		Condicion c = (Condicion)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int coleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int coright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Logico co = (Logico)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 co.add(c); RESULT = co; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("con_or",6, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // condicion ::= ID_ARCHIVO op_rel valor 
            {
              Condicion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = new Condicion(id,o,v); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("condicion",3, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // path ::= ID_ARCHIVO path_file 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 p.add(i); RESULT = p; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("path",19, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // path_file ::= PUNTO ID_ARCHIVO path_file 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		ArrayList<String> p = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 p.add(i); RESULT = p; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("path_file",20, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.elementAt(CUP$SQLParser$top-2)), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // path_file ::= 
            {
              ArrayList<String> RESULT =null;
		  RESULT = new ArrayList<String>(); 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("path_file",20, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // op_rel ::= DISTINTO 
            {
              String RESULT =null;
		  RESULT = "<>"; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("op_rel",2, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_rel ::= MENORIGUAL 
            {
              String RESULT =null;
		  RESULT = "<="; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("op_rel",2, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_rel ::= MAYORIGUAL 
            {
              String RESULT =null;
		  RESULT = ">="; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("op_rel",2, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_rel ::= MENORQUE 
            {
              String RESULT =null;
		  RESULT = "<"; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("op_rel",2, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_rel ::= MAYORQUE 
            {
              String RESULT =null;
		  RESULT = ">"; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("op_rel",2, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_rel ::= IGUAL 
            {
              String RESULT =null;
		  RESULT = "="; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("op_rel",2, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // valor ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = i; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valor ::= OTRO 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = o; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valor ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$SQLParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valor ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$SQLParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$SQLParser$stack.peek()), RESULT);
            }
          return CUP$SQLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SQLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SQLParser$do_action(
    int                        CUP$SQLParser$act_num,
    java_cup.runtime.lr_parser CUP$SQLParser$parser,
    java.util.Stack            CUP$SQLParser$stack,
    int                        CUP$SQLParser$top)
    throws java.lang.Exception
    {
              return CUP$SQLParser$do_action_part00000000(
                               CUP$SQLParser$act_num,
                               CUP$SQLParser$parser,
                               CUP$SQLParser$stack,
                               CUP$SQLParser$top);
    }
}

}
