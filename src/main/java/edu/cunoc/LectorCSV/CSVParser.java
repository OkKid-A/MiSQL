
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package edu.cunoc.LectorCSV;

import java.util.ArrayList;
import java.util.Collections;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CSVParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CSVParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CSVParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CSVParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\005\000\002\005" +
    "\005\000\002\005\003\000\002\006\006\000\002\006\002" +
    "\000\002\004\005\000\002\004\002\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\004\006\004\001\002\000\006\004\025\005" +
    "\ufffe\001\002\000\004\002\024\001\002\000\004\005\007" +
    "\001\002\000\020\002\ufffc\004\ufff5\005\ufff5\006\010\007" +
    "\012\010\014\011\015\001\002\000\006\004\ufff9\005\ufff9" +
    "\001\002\000\006\004\016\005\ufffa\001\002\000\006\004" +
    "\ufff8\005\ufff8\001\002\000\004\002\000\001\002\000\006" +
    "\004\ufff7\005\ufff7\001\002\000\006\004\ufff6\005\ufff6\001" +
    "\002\000\016\004\ufff5\005\ufff5\006\010\007\012\010\014" +
    "\011\015\001\002\000\004\005\020\001\002\000\020\002" +
    "\ufffc\004\ufff5\005\ufff5\006\010\007\012\010\014\011\015" +
    "\001\002\000\004\002\ufffd\001\002\000\006\004\016\005" +
    "\ufffa\001\002\000\004\005\ufffb\001\002\000\004\002\001" +
    "\001\002\000\004\006\004\001\002\000\004\005\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\024\000\006\002\004\005\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\010" +
    "\006\012\001\001\000\002\001\001\000\004\004\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\021\001\001\000\002\001" +
    "\001\000\006\003\010\006\020\001\001\000\002\001\001" +
    "\000\004\004\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\025\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CSVParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CSVParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CSVParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     CSVParser(CSVLexer lex){
                super(lex);
            }

private OrganizadorCSV organizadorCSV = new OrganizadorCSV();

public OrganizadorCSV getorganizadorCSV(){
    return organizadorCSV;
}

public void syntax_error(Symbol cur_token) {
            System.out.println("Simbolo con error:" + symbl_name_from_id(cur_token.sym));
            System.out.println("Linea " + cur_token.left);
            System.out.println("Columna " + cur_token.right);
            if (expected_token_ids().isEmpty()) {
                System.out.println("ya no se esperaba ningun simbolo");
            }
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CSVParser$actions {
  private final CSVParser parser;

  /** Constructor */
  CUP$CSVParser$actions(CSVParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CSVParser$do_action_part00000000(
    int                        CUP$CSVParser$act_num,
    java_cup.runtime.lr_parser CUP$CSVParser$parser,
    java.util.Stack            CUP$CSVParser$stack,
    int                        CUP$CSVParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CSVParser$result;

      /* select the action based on the action number */
      switch (CUP$CSVParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= csv EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-1)).right;
		OrganizadorCSV start_val = (OrganizadorCSV)((java_cup.runtime.Symbol) CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-1)).value;
		RESULT = start_val;
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-1)), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CSVParser$parser.done_parsing();
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // csv ::= filaHeader EOL fila 
            {
              OrganizadorCSV RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).right;
		ArrayList<String> f = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		ArrayList<Object[]> fa = (ArrayList<Object[]>)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 Collections.reverse(f); organizadorCSV.setHeaders(f); Collections.reverse(fa); organizadorCSV.setFilas(fa);
                                                                RESULT = organizadorCSV; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("csv",0, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // filaHeader ::= ID COMA filaHeader 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		ArrayList<String> f = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 f.add(i); organizadorCSV.setHeaders(f); RESULT = f; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("filaHeader",3, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // filaHeader ::= ID 
            {
              ArrayList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 ArrayList<String> f = new ArrayList<String>(); f.add(i); organizadorCSV.setHeaders(f); RESULT = f; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("filaHeader",3, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fila ::= valor columna EOL fila 
            {
              ArrayList<Object[]> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).right;
		ArrayList<Object> c = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		ArrayList<Object[]> f = (ArrayList<Object[]>)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 c.add(v); if (c.size()==organizadorCSV.getNumColumnas()){
                                                                  f.add(c.toArray(new Object[c.size()])); RESULT = f;}
                                                                  else {parser.report_error("No se encontraron suficientes columnas en la fila:" +
                                                                  f.size()+1,f); }
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("fila",4, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-3)), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fila ::= 
            {
              ArrayList<Object[]> RESULT =null;
		 RESULT =  new ArrayList<Object[]>(); 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("fila",4, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // columna ::= COMA valor columna 
            {
              ArrayList<Object> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		ArrayList<Object> c = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 c.add(v); RESULT = c; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("columna",2, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.elementAt(CUP$CSVParser$top-2)), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // columna ::= 
            {
              ArrayList<Object> RESULT =null;
		 RESULT =  new ArrayList<Object>(); 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("columna",2, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // valor ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 RESULT = i; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // valor ::= OTRO 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 RESULT = o; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		Float d = (Float)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 RESULT = d; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // valor ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$CSVParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // valor ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$CSVParser$result = parser.getSymbolFactory().newSymbol("valor",1, ((java_cup.runtime.Symbol)CUP$CSVParser$stack.peek()), RESULT);
            }
          return CUP$CSVParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CSVParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CSVParser$do_action(
    int                        CUP$CSVParser$act_num,
    java_cup.runtime.lr_parser CUP$CSVParser$parser,
    java.util.Stack            CUP$CSVParser$stack,
    int                        CUP$CSVParser$top)
    throws java.lang.Exception
    {
              return CUP$CSVParser$do_action_part00000000(
                               CUP$CSVParser$act_num,
                               CUP$CSVParser$parser,
                               CUP$CSVParser$stack,
                               CUP$CSVParser$top);
    }
}

}
